// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.wavesplatform.protobuf.transaction

@SerialVersionUID(0L)
final case class Amount(
    amount: com.wavesplatform.protobuf.transaction.Amount.Amount = com.wavesplatform.protobuf.transaction.Amount.Amount.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Amount] with scalapb.lenses.Updatable[Amount] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (amount.wavesAmount.isDefined) {
        val __value = amount.wavesAmount.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      if (amount.assetAmount.isDefined) {
        val __value = amount.assetAmount.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      amount.wavesAmount.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      amount.assetAmount.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.Amount = {
      var __amount = this.amount
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __amount = com.wavesplatform.protobuf.transaction.Amount.Amount.WavesAmount(_input__.readInt64())
          case 18 =>
            __amount = com.wavesplatform.protobuf.transaction.Amount.Amount.AssetAmount(_root_.scalapb.LiteParser.readMessage(_input__, amount.assetAmount.getOrElse(com.wavesplatform.protobuf.transaction.AssetAmount.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.wavesplatform.protobuf.transaction.Amount(
          amount = __amount
      )
    }
    def getWavesAmount: _root_.scala.Long = amount.wavesAmount.getOrElse(0L)
    def withWavesAmount(__v: _root_.scala.Long): Amount = copy(amount = com.wavesplatform.protobuf.transaction.Amount.Amount.WavesAmount(__v))
    def getAssetAmount: com.wavesplatform.protobuf.transaction.AssetAmount = amount.assetAmount.getOrElse(com.wavesplatform.protobuf.transaction.AssetAmount.defaultInstance)
    def withAssetAmount(__v: com.wavesplatform.protobuf.transaction.AssetAmount): Amount = copy(amount = com.wavesplatform.protobuf.transaction.Amount.Amount.AssetAmount(__v))
    def clearAmount: Amount = copy(amount = com.wavesplatform.protobuf.transaction.Amount.Amount.Empty)
    def withAmount(__v: com.wavesplatform.protobuf.transaction.Amount.Amount): Amount = copy(amount = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => amount.wavesAmount.orNull
        case 2 => amount.assetAmount.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => amount.wavesAmount.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => amount.assetAmount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.wavesplatform.protobuf.transaction.Amount
}

object Amount extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.Amount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.Amount] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.Amount = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.wavesplatform.protobuf.transaction.Amount(
      amount = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[_root_.scala.Long]].map(com.wavesplatform.protobuf.transaction.Amount.Amount.WavesAmount)
    .orElse[com.wavesplatform.protobuf.transaction.Amount.Amount](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.AssetAmount]].map(com.wavesplatform.protobuf.transaction.Amount.Amount.AssetAmount))
    .getOrElse(com.wavesplatform.protobuf.transaction.Amount.Amount.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.Amount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.wavesplatform.protobuf.transaction.Amount(
        amount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(com.wavesplatform.protobuf.transaction.Amount.Amount.WavesAmount)
    .orElse[com.wavesplatform.protobuf.transaction.Amount.Amount](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.AssetAmount]]).map(com.wavesplatform.protobuf.transaction.Amount.Amount.AssetAmount))
    .getOrElse(com.wavesplatform.protobuf.transaction.Amount.Amount.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionsProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = com.wavesplatform.protobuf.transaction.AssetAmount
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.wavesplatform.protobuf.transaction.Amount(
  )
  sealed trait Amount extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isWavesAmount: _root_.scala.Boolean = false
    def isAssetAmount: _root_.scala.Boolean = false
    def wavesAmount: _root_.scala.Option[_root_.scala.Long] = None
    def assetAmount: _root_.scala.Option[com.wavesplatform.protobuf.transaction.AssetAmount] = None
  }
  object Amount extends {
    @SerialVersionUID(0L)
    case object Empty extends com.wavesplatform.protobuf.transaction.Amount.Amount {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class WavesAmount(value: _root_.scala.Long) extends com.wavesplatform.protobuf.transaction.Amount.Amount {
      type ValueType = _root_.scala.Long
      override def isWavesAmount: _root_.scala.Boolean = true
      override def wavesAmount: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class AssetAmount(value: com.wavesplatform.protobuf.transaction.AssetAmount) extends com.wavesplatform.protobuf.transaction.Amount.Amount {
      type ValueType = com.wavesplatform.protobuf.transaction.AssetAmount
      override def isAssetAmount: _root_.scala.Boolean = true
      override def assetAmount: _root_.scala.Option[com.wavesplatform.protobuf.transaction.AssetAmount] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class AmountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.Amount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.Amount](_l) {
    def wavesAmount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getWavesAmount)((c_, f_) => c_.copy(amount = com.wavesplatform.protobuf.transaction.Amount.Amount.WavesAmount(f_)))
    def assetAmount: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.AssetAmount] = field(_.getAssetAmount)((c_, f_) => c_.copy(amount = com.wavesplatform.protobuf.transaction.Amount.Amount.AssetAmount(f_)))
    def amount: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.Amount.Amount] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
  }
  final val WAVESAMOUNT_FIELD_NUMBER = 1
  final val ASSETAMOUNT_FIELD_NUMBER = 2
  def of(
    amount: com.wavesplatform.protobuf.transaction.Amount.Amount
  ): _root_.com.wavesplatform.protobuf.transaction.Amount = _root_.com.wavesplatform.protobuf.transaction.Amount(
    amount
  )
}
