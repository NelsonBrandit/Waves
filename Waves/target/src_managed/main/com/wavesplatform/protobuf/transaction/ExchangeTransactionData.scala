// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.wavesplatform.protobuf.transaction

@SerialVersionUID(0L)
final case class ExchangeTransactionData(
    amount: _root_.scala.Long = 0L,
    price: _root_.scala.Long = 0L,
    buyMatcherFee: _root_.scala.Long = 0L,
    sellMatcherFee: _root_.scala.Long = 0L,
    orders: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExchangeTransactionData] with scalapb.lenses.Updatable[ExchangeTransactionData] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (orders.buySellOrders.isDefined) {
        val __value = orders.buySellOrders.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (orders.makerTakerOrders.isDefined) {
        val __value = orders.makerTakerOrders.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = amount
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      
      {
        val __value = price
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = buyMatcherFee
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
        }
      };
      
      {
        val __value = sellMatcherFee
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      orders.buySellOrders.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      orders.makerTakerOrders.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = amount
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      {
        val __v = price
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = buyMatcherFee
        if (__v != 0L) {
          _output__.writeInt64(5, __v)
        }
      };
      {
        val __v = sellMatcherFee
        if (__v != 0L) {
          _output__.writeInt64(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.ExchangeTransactionData = {
      var __amount = this.amount
      var __price = this.price
      var __buyMatcherFee = this.buyMatcherFee
      var __sellMatcherFee = this.sellMatcherFee
      var __orders = this.orders
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.BuySellOrders(_root_.scalapb.LiteParser.readMessage(_input__, orders.buySellOrders.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders.defaultInstance)))
          case 18 =>
            __orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.MakerTakerOrders(_root_.scalapb.LiteParser.readMessage(_input__, orders.makerTakerOrders.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders.defaultInstance)))
          case 24 =>
            __amount = _input__.readInt64()
          case 32 =>
            __price = _input__.readInt64()
          case 40 =>
            __buyMatcherFee = _input__.readInt64()
          case 48 =>
            __sellMatcherFee = _input__.readInt64()
          case tag => _input__.skipField(tag)
        }
      }
      com.wavesplatform.protobuf.transaction.ExchangeTransactionData(
          amount = __amount,
          price = __price,
          buyMatcherFee = __buyMatcherFee,
          sellMatcherFee = __sellMatcherFee,
          orders = __orders
      )
    }
    def getBuySellOrders: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders = orders.buySellOrders.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders.defaultInstance)
    def withBuySellOrders(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders): ExchangeTransactionData = copy(orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.BuySellOrders(__v))
    def getMakerTakerOrders: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders = orders.makerTakerOrders.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders.defaultInstance)
    def withMakerTakerOrders(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders): ExchangeTransactionData = copy(orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.MakerTakerOrders(__v))
    def withAmount(__v: _root_.scala.Long): ExchangeTransactionData = copy(amount = __v)
    def withPrice(__v: _root_.scala.Long): ExchangeTransactionData = copy(price = __v)
    def withBuyMatcherFee(__v: _root_.scala.Long): ExchangeTransactionData = copy(buyMatcherFee = __v)
    def withSellMatcherFee(__v: _root_.scala.Long): ExchangeTransactionData = copy(sellMatcherFee = __v)
    def clearOrders: ExchangeTransactionData = copy(orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.Empty)
    def withOrders(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders): ExchangeTransactionData = copy(orders = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => orders.buySellOrders.orNull
        case 2 => orders.makerTakerOrders.orNull
        case 3 => {
          val __t = amount
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = price
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = buyMatcherFee
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = sellMatcherFee
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => orders.buySellOrders.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => orders.makerTakerOrders.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PLong(amount)
        case 4 => _root_.scalapb.descriptors.PLong(price)
        case 5 => _root_.scalapb.descriptors.PLong(buyMatcherFee)
        case 6 => _root_.scalapb.descriptors.PLong(sellMatcherFee)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.wavesplatform.protobuf.transaction.ExchangeTransactionData
}

object ExchangeTransactionData extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.ExchangeTransactionData = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.wavesplatform.protobuf.transaction.ExchangeTransactionData(
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(3), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(4), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
      orders = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders]].map(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.BuySellOrders)
    .orElse[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders]].map(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.MakerTakerOrders))
    .getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.ExchangeTransactionData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.wavesplatform.protobuf.transaction.ExchangeTransactionData(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        orders = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders]]).map(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.BuySellOrders)
    .orElse[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders]]).map(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.MakerTakerOrders))
    .getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TransactionsProto.javaDescriptor.getMessageTypes.get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TransactionsProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders
      case 2 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
    _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders,
    _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders,
    _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
  )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.wavesplatform.protobuf.transaction.ExchangeTransactionData(
  )
  sealed trait Orders extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBuySellOrders: _root_.scala.Boolean = false
    def isMakerTakerOrders: _root_.scala.Boolean = false
    def buySellOrders: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] = None
    def makerTakerOrders: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] = None
  }
  object Orders extends {
    @SerialVersionUID(0L)
    case object Empty extends com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class BuySellOrders(value: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders) extends com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders {
      type ValueType = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders
      override def isBuySellOrders: _root_.scala.Boolean = true
      override def buySellOrders: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class MakerTakerOrders(value: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders) extends com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders {
      type ValueType = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders
      override def isMakerTakerOrders: _root_.scala.Boolean = true
      override def makerTakerOrders: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  @SerialVersionUID(0L)
  final case class BuySellOrders(
      buyOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = None,
      sellOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[BuySellOrders] with scalapb.lenses.Updatable[BuySellOrders] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (buyOrder.isDefined) {
          val __value = buyOrder.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (sellOrder.isDefined) {
          val __value = sellOrder.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        buyOrder.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        sellOrder.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders = {
        var __buyOrder = this.buyOrder
        var __sellOrder = this.sellOrder
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __buyOrder = Option(_root_.scalapb.LiteParser.readMessage(_input__, __buyOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)))
            case 18 =>
              __sellOrder = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sellOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders(
            buyOrder = __buyOrder,
            sellOrder = __sellOrder
        )
      }
      def getBuyOrder: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = buyOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)
      def clearBuyOrder: BuySellOrders = copy(buyOrder = None)
      def withBuyOrder(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order): BuySellOrders = copy(buyOrder = Option(__v))
      def getSellOrder: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = sellOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)
      def clearSellOrder: BuySellOrders = copy(sellOrder = None)
      def withSellOrder(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order): BuySellOrders = copy(sellOrder = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => buyOrder.orNull
          case 2 => sellOrder.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => buyOrder.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => sellOrder.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders
  }
  
  object BuySellOrders extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
        case 2 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders(
    )
    implicit class BuySellOrdersLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders](_l) {
      def buyOrder: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = field(_.getBuyOrder)((c_, f_) => c_.copy(buyOrder = Option(f_)))
      def optionalBuyOrder: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]] = field(_.buyOrder)((c_, f_) => c_.copy(buyOrder = f_))
      def sellOrder: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = field(_.getSellOrder)((c_, f_) => c_.copy(sellOrder = Option(f_)))
      def optionalSellOrder: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]] = field(_.sellOrder)((c_, f_) => c_.copy(sellOrder = f_))
    }
    final val BUYORDER_FIELD_NUMBER = 1
    final val SELLORDER_FIELD_NUMBER = 2
    def of(
      buyOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order],
      sellOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]
    ): _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders = _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders(
      buyOrder,
      sellOrder
    )
  }
  
  @SerialVersionUID(0L)
  final case class MakerTakerOrders(
      makerOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = None,
      takerOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = None
      ) extends scalapb.GeneratedMessage with scalapb.Message[MakerTakerOrders] with scalapb.lenses.Updatable[MakerTakerOrders] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (makerOrder.isDefined) {
          val __value = makerOrder.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (takerOrder.isDefined) {
          val __value = takerOrder.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        makerOrder.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        takerOrder.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders = {
        var __makerOrder = this.makerOrder
        var __takerOrder = this.takerOrder
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __makerOrder = Option(_root_.scalapb.LiteParser.readMessage(_input__, __makerOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)))
            case 18 =>
              __takerOrder = Option(_root_.scalapb.LiteParser.readMessage(_input__, __takerOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders(
            makerOrder = __makerOrder,
            takerOrder = __takerOrder
        )
      }
      def getMakerOrder: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = makerOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)
      def clearMakerOrder: MakerTakerOrders = copy(makerOrder = None)
      def withMakerOrder(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order): MakerTakerOrders = copy(makerOrder = Option(__v))
      def getTakerOrder: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = takerOrder.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.defaultInstance)
      def clearTakerOrder: MakerTakerOrders = copy(takerOrder = None)
      def withTakerOrder(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order): MakerTakerOrders = copy(takerOrder = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => makerOrder.orNull
          case 2 => takerOrder.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => makerOrder.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => takerOrder.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders
  }
  
  object MakerTakerOrders extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
        case 2 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders(
    )
    implicit class MakerTakerOrdersLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders](_l) {
      def makerOrder: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = field(_.getMakerOrder)((c_, f_) => c_.copy(makerOrder = Option(f_)))
      def optionalMakerOrder: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]] = field(_.makerOrder)((c_, f_) => c_.copy(makerOrder = f_))
      def takerOrder: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = field(_.getTakerOrder)((c_, f_) => c_.copy(takerOrder = Option(f_)))
      def optionalTakerOrder: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]] = field(_.takerOrder)((c_, f_) => c_.copy(takerOrder = f_))
    }
    final val MAKERORDER_FIELD_NUMBER = 1
    final val TAKERORDER_FIELD_NUMBER = 2
    def of(
      makerOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order],
      takerOrder: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]
    ): _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders = _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders(
      makerOrder,
      takerOrder
    )
  }
  
  @SerialVersionUID(0L)
  final case class Order(
      chainId: _root_.scala.Int = 0,
      senderPublicKey: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      matcherPublicKey: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      assetPair: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair] = None,
      orderSide: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.BUY,
      amount: _root_.scala.Long = 0L,
      price: _root_.scala.Long = 0L,
      timestamp: _root_.scala.Long = 0L,
      expiration: _root_.scala.Long = 0L,
      matcherFee: _root_.scala.Option[com.wavesplatform.protobuf.transaction.Amount] = None,
      version: _root_.scala.Int = 0,
      proofs: _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString] = _root_.scala.collection.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[Order] with scalapb.lenses.Updatable[Order] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = chainId
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = senderPublicKey
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        
        {
          val __value = matcherPublicKey
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
          }
        };
        if (assetPair.isDefined) {
          val __value = assetPair.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = orderSide
          if (__value != com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.BUY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value.value)
          }
        };
        
        {
          val __value = amount
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
          }
        };
        
        {
          val __value = price
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
          }
        };
        
        {
          val __value = timestamp
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(8, __value)
          }
        };
        
        {
          val __value = expiration
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
          }
        };
        if (matcherFee.isDefined) {
          val __value = matcherFee.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = version
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(11, __value)
          }
        };
        proofs.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(12, __value)
        }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = chainId
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = senderPublicKey
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(2, __v)
          }
        };
        {
          val __v = matcherPublicKey
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(3, __v)
          }
        };
        assetPair.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = orderSide
          if (__v != com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.BUY) {
            _output__.writeEnum(5, __v.value)
          }
        };
        {
          val __v = amount
          if (__v != 0L) {
            _output__.writeInt64(6, __v)
          }
        };
        {
          val __v = price
          if (__v != 0L) {
            _output__.writeInt64(7, __v)
          }
        };
        {
          val __v = timestamp
          if (__v != 0L) {
            _output__.writeInt64(8, __v)
          }
        };
        {
          val __v = expiration
          if (__v != 0L) {
            _output__.writeInt64(9, __v)
          }
        };
        matcherFee.foreach { __v =>
          val __m = __v
          _output__.writeTag(10, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = version
          if (__v != 0) {
            _output__.writeInt32(11, __v)
          }
        };
        proofs.foreach { __v =>
          val __m = __v
          _output__.writeBytes(12, __m)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = {
        var __chainId = this.chainId
        var __senderPublicKey = this.senderPublicKey
        var __matcherPublicKey = this.matcherPublicKey
        var __assetPair = this.assetPair
        var __orderSide = this.orderSide
        var __amount = this.amount
        var __price = this.price
        var __timestamp = this.timestamp
        var __expiration = this.expiration
        var __matcherFee = this.matcherFee
        var __version = this.version
        val __proofs = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.com.google.protobuf.ByteString] ++= this.proofs)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __chainId = _input__.readInt32()
            case 18 =>
              __senderPublicKey = _input__.readBytes()
            case 26 =>
              __matcherPublicKey = _input__.readBytes()
            case 34 =>
              __assetPair = Option(_root_.scalapb.LiteParser.readMessage(_input__, __assetPair.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair.defaultInstance)))
            case 40 =>
              __orderSide = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.fromValue(_input__.readEnum())
            case 48 =>
              __amount = _input__.readInt64()
            case 56 =>
              __price = _input__.readInt64()
            case 64 =>
              __timestamp = _input__.readInt64()
            case 72 =>
              __expiration = _input__.readInt64()
            case 82 =>
              __matcherFee = Option(_root_.scalapb.LiteParser.readMessage(_input__, __matcherFee.getOrElse(com.wavesplatform.protobuf.transaction.Amount.defaultInstance)))
            case 88 =>
              __version = _input__.readInt32()
            case 98 =>
              __proofs += _input__.readBytes()
            case tag => _input__.skipField(tag)
          }
        }
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order(
            chainId = __chainId,
            senderPublicKey = __senderPublicKey,
            matcherPublicKey = __matcherPublicKey,
            assetPair = __assetPair,
            orderSide = __orderSide,
            amount = __amount,
            price = __price,
            timestamp = __timestamp,
            expiration = __expiration,
            matcherFee = __matcherFee,
            version = __version,
            proofs = __proofs.result()
        )
      }
      def withChainId(__v: _root_.scala.Int): Order = copy(chainId = __v)
      def withSenderPublicKey(__v: _root_.com.google.protobuf.ByteString): Order = copy(senderPublicKey = __v)
      def withMatcherPublicKey(__v: _root_.com.google.protobuf.ByteString): Order = copy(matcherPublicKey = __v)
      def getAssetPair: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair = assetPair.getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair.defaultInstance)
      def clearAssetPair: Order = copy(assetPair = None)
      def withAssetPair(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair): Order = copy(assetPair = Option(__v))
      def withOrderSide(__v: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side): Order = copy(orderSide = __v)
      def withAmount(__v: _root_.scala.Long): Order = copy(amount = __v)
      def withPrice(__v: _root_.scala.Long): Order = copy(price = __v)
      def withTimestamp(__v: _root_.scala.Long): Order = copy(timestamp = __v)
      def withExpiration(__v: _root_.scala.Long): Order = copy(expiration = __v)
      def getMatcherFee: com.wavesplatform.protobuf.transaction.Amount = matcherFee.getOrElse(com.wavesplatform.protobuf.transaction.Amount.defaultInstance)
      def clearMatcherFee: Order = copy(matcherFee = None)
      def withMatcherFee(__v: com.wavesplatform.protobuf.transaction.Amount): Order = copy(matcherFee = Option(__v))
      def withVersion(__v: _root_.scala.Int): Order = copy(version = __v)
      def clearProofs = copy(proofs = _root_.scala.collection.Seq.empty)
      def addProofs(__vs: _root_.com.google.protobuf.ByteString*): Order = addAllProofs(__vs)
      def addAllProofs(__vs: TraversableOnce[_root_.com.google.protobuf.ByteString]): Order = copy(proofs = proofs ++ __vs)
      def withProofs(__v: _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]): Order = copy(proofs = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = chainId
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = senderPublicKey
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 3 => {
            val __t = matcherPublicKey
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 4 => assetPair.orNull
          case 5 => {
            val __t = orderSide.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 6 => {
            val __t = amount
            if (__t != 0L) __t else null
          }
          case 7 => {
            val __t = price
            if (__t != 0L) __t else null
          }
          case 8 => {
            val __t = timestamp
            if (__t != 0L) __t else null
          }
          case 9 => {
            val __t = expiration
            if (__t != 0L) __t else null
          }
          case 10 => matcherFee.orNull
          case 11 => {
            val __t = version
            if (__t != 0) __t else null
          }
          case 12 => proofs
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(chainId)
          case 2 => _root_.scalapb.descriptors.PByteString(senderPublicKey)
          case 3 => _root_.scalapb.descriptors.PByteString(matcherPublicKey)
          case 4 => assetPair.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => _root_.scalapb.descriptors.PEnum(orderSide.scalaValueDescriptor)
          case 6 => _root_.scalapb.descriptors.PLong(amount)
          case 7 => _root_.scalapb.descriptors.PLong(price)
          case 8 => _root_.scalapb.descriptors.PLong(timestamp)
          case 9 => _root_.scalapb.descriptors.PLong(expiration)
          case 10 => matcherFee.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => _root_.scalapb.descriptors.PInt(version)
          case 12 => _root_.scalapb.descriptors.PRepeated(proofs.map(_root_.scalapb.descriptors.PByteString)(_root_.scala.collection.breakOut))
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order
  }
  
  object Order extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order(
        __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair]],
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.fromValue(__fieldsMap.getOrElse(__fields.get(4), com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.BUY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap.getOrElse(__fields.get(5), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(6), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(7), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.getOrElse(__fields.get(8), 0L).asInstanceOf[_root_.scala.Long],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[com.wavesplatform.protobuf.transaction.Amount]],
        __fieldsMap.getOrElse(__fields.get(10), 0).asInstanceOf[_root_.scala.Int],
        __fieldsMap.getOrElse(__fields.get(11), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair]]),
          com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side.BUY.scalaValueDescriptor).number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.wavesplatform.protobuf.transaction.Amount]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 4 => __out = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair
        case 10 => __out = com.wavesplatform.protobuf.transaction.Amount
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.scalapb.GeneratedMessageCompanion[_]](
      _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair
    )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 5 => com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side
      }
    }
    lazy val defaultInstance = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order(
    )
    sealed trait Side extends _root_.scalapb.GeneratedEnum {
      type EnumType = Side
      def isBuy: _root_.scala.Boolean = false
      def isSell: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[Side] = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side
    }
    
    object Side extends _root_.scalapb.GeneratedEnumCompanion[Side] {
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Side] = this
      @SerialVersionUID(0L)
      case object BUY extends Side {
        val value = 0
        val index = 0
        val name = "BUY"
        override def isBuy: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SELL extends Side {
        val value = 1
        val index = 1
        val name = "SELL"
        override def isSell: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(value: _root_.scala.Int) extends Side with _root_.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(BUY, SELL)
      def fromValue(value: _root_.scala.Int): Side = value match {
        case 0 => BUY
        case 1 => SELL
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.scalaDescriptor.enums(0)
    }
    @SerialVersionUID(0L)
    final case class AssetPair(
        amountAssetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
        priceAssetId: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
        ) extends scalapb.GeneratedMessage with scalapb.Message[AssetPair] with scalapb.lenses.Updatable[AssetPair] {
        @transient
        private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
        private[this] def __computeSerializedValue(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = amountAssetId
            if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
            }
          };
          
          {
            val __value = priceAssetId
            if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
            }
          };
          __size
        }
        final override def serializedSize: _root_.scala.Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = amountAssetId
            if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
              _output__.writeBytes(1, __v)
            }
          };
          {
            val __v = priceAssetId
            if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
              _output__.writeBytes(2, __v)
            }
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair = {
          var __amountAssetId = this.amountAssetId
          var __priceAssetId = this.priceAssetId
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __amountAssetId = _input__.readBytes()
              case 18 =>
                __priceAssetId = _input__.readBytes()
              case tag => _input__.skipField(tag)
            }
          }
          com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair(
              amountAssetId = __amountAssetId,
              priceAssetId = __priceAssetId
          )
        }
        def withAmountAssetId(__v: _root_.com.google.protobuf.ByteString): AssetPair = copy(amountAssetId = __v)
        def withPriceAssetId(__v: _root_.com.google.protobuf.ByteString): AssetPair = copy(priceAssetId = __v)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = amountAssetId
              if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
            }
            case 2 => {
              val __t = priceAssetId
              if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PByteString(amountAssetId)
            case 2 => _root_.scalapb.descriptors.PByteString(priceAssetId)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair
    }
    
    object AssetPair extends scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair = {
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair(
          __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
          __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair(
      )
      implicit class AssetPairLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair](_l) {
        def amountAssetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.amountAssetId)((c_, f_) => c_.copy(amountAssetId = f_))
        def priceAssetId: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.priceAssetId)((c_, f_) => c_.copy(priceAssetId = f_))
      }
      final val AMOUNTASSETID_FIELD_NUMBER = 1
      final val PRICEASSETID_FIELD_NUMBER = 2
      def of(
        amountAssetId: _root_.com.google.protobuf.ByteString,
        priceAssetId: _root_.com.google.protobuf.ByteString
      ): _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair = _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair(
        amountAssetId,
        priceAssetId
      )
    }
    
    implicit class OrderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order](_l) {
      def chainId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.chainId)((c_, f_) => c_.copy(chainId = f_))
      def senderPublicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.senderPublicKey)((c_, f_) => c_.copy(senderPublicKey = f_))
      def matcherPublicKey: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.matcherPublicKey)((c_, f_) => c_.copy(matcherPublicKey = f_))
      def assetPair: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair] = field(_.getAssetPair)((c_, f_) => c_.copy(assetPair = Option(f_)))
      def optionalAssetPair: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair]] = field(_.assetPair)((c_, f_) => c_.copy(assetPair = f_))
      def orderSide: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side] = field(_.orderSide)((c_, f_) => c_.copy(orderSide = f_))
      def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
      def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.price)((c_, f_) => c_.copy(price = f_))
      def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
      def expiration: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.expiration)((c_, f_) => c_.copy(expiration = f_))
      def matcherFee: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.Amount] = field(_.getMatcherFee)((c_, f_) => c_.copy(matcherFee = Option(f_)))
      def optionalMatcherFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.wavesplatform.protobuf.transaction.Amount]] = field(_.matcherFee)((c_, f_) => c_.copy(matcherFee = f_))
      def version: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.version)((c_, f_) => c_.copy(version = f_))
      def proofs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]] = field(_.proofs)((c_, f_) => c_.copy(proofs = f_))
    }
    final val CHAINID_FIELD_NUMBER = 1
    final val SENDERPUBLICKEY_FIELD_NUMBER = 2
    final val MATCHERPUBLICKEY_FIELD_NUMBER = 3
    final val ASSETPAIR_FIELD_NUMBER = 4
    final val ORDERSIDE_FIELD_NUMBER = 5
    final val AMOUNT_FIELD_NUMBER = 6
    final val PRICE_FIELD_NUMBER = 7
    final val TIMESTAMP_FIELD_NUMBER = 8
    final val EXPIRATION_FIELD_NUMBER = 9
    final val MATCHERFEE_FIELD_NUMBER = 10
    final val VERSION_FIELD_NUMBER = 11
    final val PROOFS_FIELD_NUMBER = 12
    def of(
      chainId: _root_.scala.Int,
      senderPublicKey: _root_.com.google.protobuf.ByteString,
      matcherPublicKey: _root_.com.google.protobuf.ByteString,
      assetPair: _root_.scala.Option[com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.AssetPair],
      orderSide: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order.Side,
      amount: _root_.scala.Long,
      price: _root_.scala.Long,
      timestamp: _root_.scala.Long,
      expiration: _root_.scala.Long,
      matcherFee: _root_.scala.Option[com.wavesplatform.protobuf.transaction.Amount],
      version: _root_.scala.Int,
      proofs: _root_.scala.collection.Seq[_root_.com.google.protobuf.ByteString]
    ): _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order = _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Order(
      chainId,
      senderPublicKey,
      matcherPublicKey,
      assetPair,
      orderSide,
      amount,
      price,
      timestamp,
      expiration,
      matcherFee,
      version,
      proofs
    )
  }
  
  implicit class ExchangeTransactionDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData](_l) {
    def buySellOrders: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.BuySellOrders] = field(_.getBuySellOrders)((c_, f_) => c_.copy(orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.BuySellOrders(f_)))
    def makerTakerOrders: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.MakerTakerOrders] = field(_.getMakerTakerOrders)((c_, f_) => c_.copy(orders = com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders.MakerTakerOrders(f_)))
    def amount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def price: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.price)((c_, f_) => c_.copy(price = f_))
    def buyMatcherFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.buyMatcherFee)((c_, f_) => c_.copy(buyMatcherFee = f_))
    def sellMatcherFee: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.sellMatcherFee)((c_, f_) => c_.copy(sellMatcherFee = f_))
    def orders: _root_.scalapb.lenses.Lens[UpperPB, com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders] = field(_.orders)((c_, f_) => c_.copy(orders = f_))
  }
  final val BUYSELLORDERS_FIELD_NUMBER = 1
  final val MAKERTAKERORDERS_FIELD_NUMBER = 2
  final val AMOUNT_FIELD_NUMBER = 3
  final val PRICE_FIELD_NUMBER = 4
  final val BUYMATCHERFEE_FIELD_NUMBER = 5
  final val SELLMATCHERFEE_FIELD_NUMBER = 6
  def of(
    amount: _root_.scala.Long,
    price: _root_.scala.Long,
    buyMatcherFee: _root_.scala.Long,
    sellMatcherFee: _root_.scala.Long,
    orders: com.wavesplatform.protobuf.transaction.ExchangeTransactionData.Orders
  ): _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData = _root_.com.wavesplatform.protobuf.transaction.ExchangeTransactionData(
    amount,
    price,
    buyMatcherFee,
    sellMatcherFee,
    orders
  )
}
